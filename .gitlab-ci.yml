workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

    - if: '$CI_COMMIT_BRANCH'
      when: always
#    - when: never
#trigger

stages:
  - backend-test
  - docker-build
  - backend-deploy
  - frontend
  - pages

variables:
  DOCKER_IMAGE_BACKEND: "$CI_REGISTRY_IMAGE/backend"
  SSH_USER: ubuntu
  EC2_HOST: $EC2_PUBLIC_IP
  SSH_KEY: $EC2_SSH_KEY
  DB_HOST: $DB_HOST
  DB_DATABASE: $DB_NAME
  DB_USERNAME: $DB_USERNAME
  DB_PASSWORD: $DB_PASSWORD
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN
  GITLAB_ACCESS_TOKEN: $GITLAB_ACCESS_TOKEN

backend-test:
  stage: backend-test
  image: php:8.2-fpm
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - backend/vendor/
      - /root/.composer/cache
  before_script:
    - apt-get update && apt-get install -y git curl zip unzip libpq-dev libzip-dev libonig-dev libsqlite3-dev sqlite3
    - docker-php-ext-install pdo pdo_mysql pdo_pgsql bcmath mbstring zip pdo_sqlite
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - cd backend && composer install
  script:
    - |
      cat > .env <<EOF
      APP_NAME=NSSThermometerBackend
      APP_ENV=local
      APP_KEY=base64:zYgRkEuotrmHIkGQlAUY/VvTKOUSjjpWF7DLco5vRok=
      APP_DEBUG=true
      APP_URL=http://localhost
      LOG_CHANNEL=stack
      CACHE_DRIVER=file
      QUEUE_CONNECTION=sync
      DB_CONNECTION=sqlite
      DB_DATABASE=/builds/saxionnl/hbo-ict/2.3-devops/2024-2025/exam-regular/17/backend/database/database.sqlite
      EOF
    - touch ./database/database.sqlite
    - php artisan migrate --force
    - mkdir -p ./tests/Unit && php artisan test --log-junit test-report.xml
  artifacts:
    paths:
      - backend/test-report.xml
    expire_in: 1 week
  only:
    - main

build_backend_image:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin "$CI_REGISTRY"
  script:
    - docker build -t "$DOCKER_IMAGE_BACKEND:latest" ./backend
    - docker push "$DOCKER_IMAGE_BACKEND:latest"
  # only:
  #   - main

backend-deploy:
  stage: backend-deploy
  image:
    name: zenika/terraform-aws-cli
    entrypoint: [""]
  script:
    - mkdir -p ~/.aws
    - |
      cat <<EOF > ~/.aws/credentials
      [default]
      aws_access_key_id = $AWS_ACCESS_KEY_ID
      aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
      aws_session_token = $AWS_SESSION_TOKEN
      EOF
    - cat ~/.aws/credentials
    - aws sts get-caller-identity
    - cd ./infra
    - |
      export TF_STATE_NAME=default
      terraform init \
      -backend-config="address=https://gitlab.com/api/v4/projects/68303238/terraform/state/$TF_STATE_NAME" \
      -backend-config="lock_address=https://gitlab.com/api/v4/projects/68303238/terraform/state/$TF_STATE_NAME/lock" \
      -backend-config="unlock_address=https://gitlab.com/api/v4/projects/68303238/terraform/state/$TF_STATE_NAME/lock" \
      -backend-config="username=tavger" \
      -backend-config="password=$GITLAB_ACCESS_TOKEN" \
      -backend-config="lock_method=POST" \
      -backend-config="unlock_method=DELETE" \
      -backend-config="retry_wait_min=5"
    - terraform plan -out=tfplan -var="public_image_repo=$CI_REGISTRY_IMAGE/backend" -var="docker_image_tag=$CI_COMMIT_SHA" -var="db_password=$DB_PASSWORD"
    - terraform apply -auto-approve tfplan
    
  artifacts:
    paths:
      - infra/gitlab_env.sh
    expire_in: 15 minute
  # only:
  #   - main

frontend:
  stage: frontend
  image: node:18-alpine
  dependencies:
    - backend-deploy
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
      - /root/.npm
  before_script:
    - cd frontend && npm install
    - source ../infra/gitlab_env.sh
  script:
    - echo "VITE_API_URL=http://${ALB_DNS_NAME}" > .env
    - npm run build
  artifacts:
    paths:
      - frontend/dist
    expire_in: 1 week

pages:
  stage: pages
  script:
    - mv frontend/dist public
  artifacts:
    paths:
      - public
    expire_in: 1 week
  # only:
  #   - main

   
