workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

    - if: '$CI_COMMIT_BRANCH'
      when: always
#    - when: never
#trigger

stages:
  - backend
  - frontend
  - docker-build
  - deploy

variables:
  DOCKER_IMAGE_BACKEND: "$CI_REGISTRY_IMAGE/backend"
  SSH_USER: ubuntu
  EC2_HOST: $EC2_PUBLIC_IP
  SSH_KEY: $EC2_SSH_KEY
  DB_HOST: $DB_HOST
  DB_DATABASE: $DB_NAME
  DB_USERNAME: $DB_USERNAME
  DB_PASSWORD: $DB_PASSWORD



backend:
  stage: backend
  image: php:8.2-fpm
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - backend/vendor/
      - /root/.composer/cache
  before_script:
    - apt-get update && apt-get install -y git curl zip unzip libpq-dev libzip-dev libonig-dev libsqlite3-dev sqlite3
    - docker-php-ext-install pdo pdo_mysql pdo_pgsql bcmath mbstring zip
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - cd backend && composer install
  script:
    - |
      cat > .env <<EOF
      APP_NAME=NSSThermometerBackend
      APP_ENV=local
      APP_KEY=base64:zYgRkEuotrmHIkGQlAUY/VvTKOUSjjpWF7DLco5vRok=
      APP_DEBUG=true
      APP_URL=http://localhost
      LOG_CHANNEL=stack
      CACHE_DRIVER=file
      QUEUE_CONNECTION=sync
      DB_CONNECTION=sqlite
      DB_DATABASE=./database.sqlite
      EOF
    - touch ./database/database.sqlite
    - php artisan migrate --force
    - mkdir -p ./tests/Unit && php artisan test --log-junit test-report.xml
  artifacts:
    paths:
      - backend/test-report.xml
    expire_in: 1 week

frontend:
  stage: frontend
  image: node:18-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
      - /root/.npm
  before_script:
    - cd frontend && npm install
  script:
    - npm run build
  artifacts:
    paths:
      - frontend/dist
    expire_in: 1 week

build_backend_image:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin "$CI_REGISTRY"
  script:
    - docker build -t "$DOCKER_IMAGE_BACKEND:latest" ./backend
    - docker push "$DOCKER_IMAGE_BACKEND:latest"

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh docker-cli
    - mkdir -p ~/.ssh
    - echo "$SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
  script:
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST "
      docker stop nss-backend || true &&
      docker rm nss-backend || true &&
      docker pull $DOCKER_IMAGE_BACKEND:latest &&

      docker run -d --name nss-backend \
        -e DB_CONNECTION=pgsql \
        -e DB_HOST=$DB_HOST \
        -e DB_PORT=5432 \
        -e DB_DATABASE=$DB_NAME \
        -e DB_USERNAME=$DB_USERNAME \
        -e DB_PASSWORD=$DB_PASSWORD \
        -p 8000:8000 $DOCKER_IMAGE_BACKEND:latest &&

      docker exec nss-backend php artisan migrate --force
      "
  #only:
   # - main

